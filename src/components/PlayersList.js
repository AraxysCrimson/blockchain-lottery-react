// src/components/PlayersList.js
import React, { useState, useEffect, useCallback } from 'react';
import './PlayersList.css';

function PlayersList({ players, currentAccount, shortenAddress, title = "Danh S√°ch Ng∆∞·ªùi Tham Gia" }) {
  // S·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i hi·ªÉn th·ªã tr√™n m·ªói trang
  const PLAYERS_PER_PAGE = 5;
  
  // State cho trang hi·ªán t·∫°i
  const [currentPage, setCurrentPage] = useState(1);
  // T·ªïng s·ªë trang
  const [totalPages, setTotalPages] = useState(1);
  // Danh s√°ch ng∆∞·ªùi ch∆°i tr√™n trang hi·ªán t·∫°i
  const [currentPlayers, setCurrentPlayers] = useState([]);

  // H√†m c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i cho trang hi·ªán t·∫°i - ƒë·∫∑t trong useCallback
  const updateCurrentPlayers = useCallback(() => {
    if (!players || players.length === 0) {
      setCurrentPlayers([]);
      return;
    }
    
    const startIndex = (currentPage - 1) * PLAYERS_PER_PAGE;
    const endIndex = Math.min(startIndex + PLAYERS_PER_PAGE, players.length);
    setCurrentPlayers(players.slice(startIndex, endIndex));
  }, [players, currentPage, PLAYERS_PER_PAGE]);

  // T√≠nh to√°n t·ªïng s·ªë trang v√† c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i hi·ªán t·∫°i khi players thay ƒë·ªïi
  useEffect(() => {
    if (players && players.length > 0) {
      const total = Math.ceil(players.length / PLAYERS_PER_PAGE);
      setTotalPages(total);
      
      // ƒê·∫£m b·∫£o trang hi·ªán t·∫°i kh√¥ng v∆∞·ª£t qu√° t·ªïng s·ªë trang
      if (currentPage > total) {
        setCurrentPage(1);
      }
      
      // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i cho trang hi·ªán t·∫°i
      updateCurrentPlayers();
    } else {
      setTotalPages(1);
      setCurrentPlayers([]);
    }
  }, [players, currentPage, updateCurrentPlayers, PLAYERS_PER_PAGE]);

  // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i khi trang hi·ªán t·∫°i thay ƒë·ªïi
  useEffect(() => {
    updateCurrentPlayers();
  }, [currentPage, updateCurrentPlayers]);

  // Chuy·ªÉn ƒë·∫øn trang tr∆∞·ªõc
  const goToPreviousPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
    }
  };

  // Chuy·ªÉn ƒë·∫øn trang ti·∫øp theo
  const goToNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
    }
  };

  // Chuy·ªÉn ƒë·∫øn m·ªôt trang c·ª• th·ªÉ
  const goToPage = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
    }
  };

  // T·∫°o m·∫£ng c√°c n√∫t ph√¢n trang
  const renderPaginationButtons = () => {
    const pageButtons = [];
    
    // Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c n√∫t trang (v√¨ th∆∞·ªùng kh√¥ng qu√° nhi·ªÅu)
    for (let i = 1; i <= totalPages; i++) {
      pageButtons.push(
        <button 
          key={i} 
          className={`pagination-button ${currentPage === i ? 'active' : ''}`} 
          onClick={() => goToPage(i)}
        >
          {i}
        </button>
      );
    }
    
    return pageButtons;
  };

  // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ ng∆∞·ªùi ch∆°i
  const renderEmptyState = () => (
    <div className="no-players-message">
      <div className="no-players-icon">üë•</div>
      <p>Ch∆∞a c√≥ ng∆∞·ªùi tham gia x·ªï s·ªë</p>
      <p>H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n tham gia!</p>
    </div>
  );

  // X·ª≠ l√Ω hi·ªÉn th·ªã b·∫£ng ng∆∞·ªùi ch∆°i
  const renderPlayersTable = () => (
    <div className="players-table-container">
      <table className="players-table">
        <thead>
          <tr>
            <th>STT</th>
            <th>ƒê·ªãa Ch·ªâ V√≠</th>
            <th>Tr·∫°ng Th√°i</th>
          </tr>
        </thead>
        <tbody>
          {currentPlayers.map((player, index) => {
            // T√≠nh to√°n STT th·ª±c t·∫ø d·ª±a tr√™n trang hi·ªán t·∫°i
            const realIndex = (currentPage - 1) * PLAYERS_PER_PAGE + index;
            
            return (
              <tr 
                key={index} 
                className={player.toLowerCase() === currentAccount.toLowerCase() ? 'current-user' : ''}
              >
                <td>{realIndex + 1}</td>
                <td>{shortenAddress ? shortenAddress(player) : player}</td>
                <td>
                  {player.toLowerCase() === currentAccount.toLowerCase() ? 
                    <span className="user-badge">B·∫°n</span> : 
                    <span className="player-badge">Ng∆∞·ªùi ch∆°i</span>
                  }
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );

  // Hi·ªÉn th·ªã th√¥ng tin ph√¢n trang
  const renderPaginationInfo = () => {
    if (!players || players.length === 0) return null;
    
    const startItem = (currentPage - 1) * PLAYERS_PER_PAGE + 1;
    const endItem = Math.min(startItem + currentPlayers.length - 1, players.length);
    
    return (
      <div className="pagination-info">
        Hi·ªÉn th·ªã <span className="highlight">{startItem}-{endItem}</span> tr√™n t·ªïng s·ªë <span className="highlight">{players.length}</span> ng∆∞·ªùi ch∆°i
      </div>
    );
  };

  return (
    <div className="players-section">
      <h3>{title} {players && players.length > 0 && `(${players.length})`}</h3>
      {!players || players.length === 0 ? renderEmptyState() : renderPlayersTable()}
      
      {/* Hi·ªÉn th·ªã ph√¢n trang n·∫øu c√≥ nhi·ªÅu ng∆∞·ªùi ch∆°i */}
      {players && players.length > PLAYERS_PER_PAGE && (
        <div className="pagination-container">
          {renderPaginationInfo()}
          <div className="pagination">
            <button 
              className="pagination-button pagination-nav" 
              onClick={goToPreviousPage}
              disabled={currentPage === 1}
            >
              &laquo;
            </button>
            
            {renderPaginationButtons()}
            
            <button 
              className="pagination-button pagination-nav" 
              onClick={goToNextPage}
              disabled={currentPage === totalPages}
            >
              &raquo;
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default PlayersList;
