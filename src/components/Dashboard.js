// src/components/Dashboard.js
import React, { useState, useEffect, useCallback } from 'react';
import './Dashboard.css';

function Dashboard({ 
  balance, 
  players, 
  accountBalance, 
  isPlayerParticipating, 
  value, 
  setValue, 
  onSubmit, 
  isLoading, 
  isManager, 
  pickWinner 
}) {
  const [error, setError] = useState('');
  const [inputTouched, setInputTouched] = useState(false);
  const MIN_ENTRY = 0.01; // Ph√≠ tham gia t·ªëi thi·ªÉu

  // Ki·ªÉm tra gi√° tr·ªã nh·∫≠p v√†o v√† x√°c ƒë·ªãnh lo·∫°i l·ªói
  const validateInput = useCallback(() => {
    if (!value) {
      return '';
    }
    
    const numValue = parseFloat(value);
    
    // Ki·ªÉm tra n·∫øu gi√° tr·ªã kh√¥ng ph·∫£i l√† s·ªë
    if (isNaN(numValue)) {
      return 'invalid_format';
    }
    
    // Ki·ªÉm tra n·∫øu gi√° tr·ªã l√† s·ªë √¢m
    if (numValue <= 0) {
      return 'negative_value';
    }
    
    // Ki·ªÉm tra n·∫øu gi√° tr·ªã nh·ªè h∆°n m·ª©c t·ªëi thi·ªÉu
    if (numValue < MIN_ENTRY) {
      return 'below_minimum';
    }
    
    // Ki·ªÉm tra n·∫øu gi√° tr·ªã l·ªõn h∆°n s·ªë d∆∞ t√†i kho·∫£n
    if (numValue > parseFloat(accountBalance)) {
      return 'insufficient_balance';
    }
    
    return '';
  }, [value, accountBalance, MIN_ENTRY]);

  // C·∫≠p nh·∫≠t l·ªói khi gi√° tr·ªã thay ƒë·ªïi
  useEffect(() => {
    if (inputTouched) {
      setError(validateInput());
    }
  }, [value, inputTouched, validateInput]);

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng thay ƒë·ªïi gi√° tr·ªã
  const handleValueChange = (event) => {
    setValue(event.target.value);
    setInputTouched(true);
  };

  // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói d·ª±a tr√™n lo·∫°i l·ªói
  const getErrorMessage = () => {
    switch (error) {
      case 'invalid_format':
        return 'Vui l√≤ng ch·ªâ nh·∫≠p s·ªë (v√≠ d·ª•: 0.01)';
      case 'negative_value':
        return 'Gi√° tr·ªã ph·∫£i l·ªõn h∆°n 0';
      case 'below_minimum':
        return `S·ªë ti·ªÅn t·ªëi thi·ªÉu l√† ${MIN_ENTRY} ETH`;
      case 'insufficient_balance':
        return 'S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c s·ªë ti·ªÅn n√†y';
      default:
        return '';
    }
  };

  // Ki·ªÉm tra xem gi√° tr·ªã nh·∫≠p v√†o c√≥ h·ª£p l·ªá kh√¥ng
  const isValidInput = error === '';

  // X·ª≠ l√Ω s·ª± ki·ªán submit
  const handleSubmit = (e) => {
    e.preventDefault();
    if (isValidInput && value && !isLoading) {
      onSubmit();
    }
  };

  return (
    <div className="dashboard-container">
      <div className="dashboard">
        <div className="stats-card">
          <div className="card-header">
            <h3>Th·ªëng k√™</h3>
            <div className="card-icon">üìä</div>
          </div>
          <div className="stats-item">
            <span>Gi·∫£i th∆∞·ªüng hi·ªán t·∫°i</span>
            <span className="highlight prize-value">{balance} ETH</span>
          </div>
          <div className="stats-item">
            <span>S·ªë ng∆∞·ªùi tham gia</span>
            <span className="highlight">{players.length}</span>
          </div>
          <div className="stats-item">
            <span>S·ªë d∆∞ v√≠ c·ªßa b·∫°n</span>
            <span className="highlight">{parseFloat(accountBalance).toFixed(4)} ETH</span>
          </div>
          <div className="stats-item">
            <span>Tr·∫°ng th√°i</span>
            <span className={`status ${isPlayerParticipating ? 'active' : 'inactive'}`}>
              {isPlayerParticipating ? 'ƒê√£ tham gia' : 'Ch∆∞a tham gia'}
            </span>
          </div>
        </div>

        <div className="action-card">
          <div className="card-header">
            <h3>Tham Gia X·ªï S·ªë</h3>
            <div className="card-icon">üé´</div>
          </div>
          <div className="form-container">
            <div className="form-group">
              <label htmlFor="ethAmount">S·ªë ETH mu·ªën ƒë·∫∑t c∆∞·ª£c:</label>
              <div className={`input-wrapper ${error ? 'input-error-border' : ''}`}>
                <input
                  id="ethAmount"
                  type="number"
                  step="0.01"
                  min={MIN_ENTRY}
                  value={value}
                  onChange={handleValueChange}
                  placeholder="V√≠ d·ª•: 0.01"
                  onBlur={() => setInputTouched(true)}
                  autoComplete="off"
                  className="input-field"
                />
                <span className="currency-symbol">ETH</span>
              </div>
              {inputTouched && error && (
                <div className="input-error">
                  <span className="error-icon">‚ö†Ô∏è</span>
                  <span>{getErrorMessage()}</span>
                </div>
              )}
            </div>
            <button 
              onClick={handleSubmit} 
              className="btn btn-primary buy-ticket-btn" 
              disabled={isLoading || !isValidInput || !value}
              type="button"
            >
              {isLoading ? 
                <><span className="spinner"></span>ƒêang x·ª≠ l√Ω...</> : 
                <>Mua V√© S·ªë <span className="btn-icon">‚Üí</span></>
              }
            </button>
            <p className="min-entry">Ph√≠ tham gia t·ªëi thi·ªÉu: <span className="highlight-small">{MIN_ENTRY} ETH</span></p>
            
            <div className="action-tips">
              <div className="tip-item">
                <span className="tip-icon">üí°</span>
                <span>M·ªói v√© mua s·∫Ω tƒÉng c∆° h·ªôi chi·∫øn th·∫Øng c·ªßa b·∫°n</span>
              </div>
              <div className="tip-item">
                <span className="tip-icon">üîÑ</span>
                <span>K·∫øt qu·∫£ x·ªï s·ªë s·∫Ω ƒë∆∞·ª£c c√¥ng b·ªë v√†o l√∫c 17:00 h√†ng ng√†y</span>
              </div>
            </div>
          </div>
        </div>

        {isManager && (
          <div className="admin-card">
            <div className="card-header">
              <h3>Qu·∫£n L√Ω X·ªï S·ªë</h3>
              <div className="card-icon admin-icon">üëë</div>
            </div>
            <div className="admin-status">
              <span className="admin-badge">Admin</span>
              <p>B·∫°n l√† ng∆∞·ªùi qu·∫£n l√Ω h·ª£p ƒë·ªìng n√†y</p>
            </div>
            <button 
              onClick={pickWinner} 
              className="btn btn-danger admin-btn" 
              disabled={isLoading || players.length === 0}
              type="button"
            >
              {isLoading ? 
                <><span className="spinner"></span>ƒêang x·ª≠ l√Ω...</> : 
                <>Ch·ªçn Ng∆∞·ªùi Chi·∫øn Th·∫Øng <span className="btn-icon">üèÜ</span></>
              }
            </button>
            {players.length === 0 && (
              <p className="no-players-warning">
                <span className="warning-icon">‚ö†Ô∏è</span> Ch∆∞a c√≥ ng∆∞·ªùi tham gia, kh√¥ng th·ªÉ ch·ªçn ng∆∞·ªùi chi·∫øn th·∫Øng
              </p>
            )}
            
            <div className="admin-info">
              <div className="info-item">
                <span className="info-icon">‚ÑπÔ∏è</span>
                <span>Khi ch·ªçn ng∆∞·ªùi chi·∫øn th·∫Øng, to√†n b·ªô s·ªë d∆∞ s·∫Ω ƒë∆∞·ª£c chuy·ªÉn cho ng∆∞·ªùi th·∫Øng</span>
              </div>
              <div className="info-item">
                <span className="info-icon">üîí</span>
                <span>Ch·ªâ admin m·ªõi c√≥ quy·ªÅn ch·ªçn ng∆∞·ªùi chi·∫øn th·∫Øng</span>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default Dashboard;
